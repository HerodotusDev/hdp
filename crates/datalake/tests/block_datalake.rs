use datalake::block_datalake::BlockDatalake;

#[test]
fn test_block_datalake_for_header() {
    let blocksample_datalake = "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009eb0f600000000000000000000000000000000000000000000000000000000009eb100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002010f000000000000000000000000000000000000000000000000000000000000";
    let decoded_datalake =
        BlockDatalake::from_serialized(blocksample_datalake.to_string()).unwrap();
    let block_datalake =
        BlockDatalake::new(10399990, 10400000, "header.base_fee_per_gas".to_string(), 1);
    assert_eq!(decoded_datalake, block_datalake);
}

#[test]
fn test_block_datalake_for_account() {
    let blocksample_datalake = "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009eb0f600000000000000000000000000000000000000000000000000000000009eb100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000016027b2f05ce9ae365c3dbf30657e2dc6449989e83d60000000000000000000000";
    let decoded_datalake =
        BlockDatalake::from_serialized(blocksample_datalake.to_string()).unwrap();
    let block_datalake = BlockDatalake::new(
        10399990,
        10400000,
        "account.0x7b2f05ce9ae365c3dbf30657e2dc6449989e83d6.nonce".to_string(),
        1,
    );
    assert_eq!(decoded_datalake, block_datalake);
}

#[test]
fn test_block_datalake_for_storage() {
    let blocksample_datalake = "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009eb0f600000000000000000000000000000000000000000000000000000000009eb100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035037b2f05ce9ae365c3dbf30657e2dc6449989e83d600000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000";
    let decoded_datalake =
        BlockDatalake::from_serialized(blocksample_datalake.to_string()).unwrap();
    let block_datalake = BlockDatalake::new(
        10399990,
        10400000,
        "storage.0x7b2f05ce9ae365c3dbf30657e2dc6449989e83d6.0x00000000000000000000000000000000000000000000000000000000000000ff".to_string(),
        1,
    );
    assert_eq!(decoded_datalake, block_datalake);
}
