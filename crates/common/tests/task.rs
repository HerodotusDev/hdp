use alloy_dyn_abi::DynSolType;
use alloy_primitives::hex::FromHex;
use common::task::ComputationalTask;

#[test]
fn test_task_from_serialized() {
    let serialized_tasks_batch = "0xd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000606d696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000606d6178000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000";
    let tasks_type: DynSolType = "bytes[]".parse().unwrap();
    let bytes = Vec::from_hex(serialized_tasks_batch).expect("Invalid hex string");
    let serialized_tasks = tasks_type.abi_decode(&bytes).unwrap();
    let mut computational_task_result = Vec::new();

    if let Some(tasks) = serialized_tasks.as_array() {
        for task in tasks {
            let computational_task =
                ComputationalTask::decode_not_filled_task(task.as_bytes().unwrap()).unwrap();
            computational_task_result.push(computational_task);
        }
    }

    assert_eq!(computational_task_result.len(), 4);
    assert_eq!(
        computational_task_result[0].aggregate_fn_id,
        "avg".to_string()
    );
    assert_eq!(computational_task_result[0].aggregate_fn_ctx, None);
    assert_eq!(
        computational_task_result[1].aggregate_fn_id,
        "sum".to_string()
    );
    assert_eq!(computational_task_result[1].aggregate_fn_ctx, None);
    assert_eq!(
        computational_task_result[2].aggregate_fn_id,
        "min".to_string()
    );
    assert_eq!(computational_task_result[2].aggregate_fn_ctx, None);
    assert_eq!(
        computational_task_result[3].aggregate_fn_id,
        "max".to_string()
    );
    assert_eq!(computational_task_result[3].aggregate_fn_ctx, None);
}
