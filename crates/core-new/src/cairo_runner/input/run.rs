use cairo_lang_starknet_classes::casm_contract_class::CasmContractClass;
use hdp_provider::evm::AbstractProviderResult;

use crate::module::Module;

/*
    input.json file that will be passed to the processor, is generated by this struct.
*/

pub struct RunnerInput {
    /// Detail sierra code of the module.
    /// This will be loaded to bootloader.
    // TODO: potentially we can merge multiple modules into one file
    modules_class: Vec<CasmContractClass>,
    modules: Vec<Module>,
    /// Fetched proofs per each fetch point.
    proofs: AbstractProviderResult,
}

impl RunnerInput {
    pub fn new(
        modules_class: Vec<CasmContractClass>,
        modules: Vec<Module>,
        proofs: AbstractProviderResult,
    ) -> Self {
        Self {
            modules_class,
            modules,
            proofs,
        }
    }

    // TODO: Somehow need to make `Vec<CairoProgram>`, `Vec<Module>`, Vec<Proof> to input data format
    pub fn to_bytes(&self) -> Vec<u8> {
        todo!("Convert ProcessorInput to json")
    }
}
