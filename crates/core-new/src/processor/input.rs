use cairo_lang_sierra_to_casm::compiler::CairoProgram;

use crate::module::Module;

/*
    input.json file that will be passed to the processor, is generated by this struct.
*/

pub struct ProcessorInput {
    /// Detail sierra code of the module.
    /// This will be loaded to bootloader.
    // TODO: potentially we can merge multiple modules into one file
    modules_casm: Vec<CairoProgram>,
    modules: Vec<Module>,
    /// Fetched proofs per each fetch point.
    proofs: Vec<String>,
}

impl ProcessorInput {
    pub fn new(modules_casm: Vec<CairoProgram>, modules: Vec<Module>, proofs: Vec<String>) -> Self {
        Self {
            modules_casm,
            modules,
            proofs,
        }
    }

    // TODO: Somehow need to make `Vec<CairoProgram>`, `Vec<Module>`, Vec<Proof> to input data format
    pub fn to_bytes(&self) -> Vec<u8> {
        todo!("Convert ProcessorInput to json")
    }
}
