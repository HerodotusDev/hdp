use hdp_primitives::processed_types::{block_proofs::ProcessedBlockProofs, task::ProcessedTask};
use serde::Serialize;

///  input.json file that will be passed to the cairo-run, is generated by this struct.
#[derive(Serialize)]
pub struct RunnerProgramInput {
    /// Batched tasks root of all tasks.
    pub task_root: String,
    /// if every tasks are pre computable, this can be Some
    #[serde(skip_serializing_if = "Option::is_none")]
    pub result_root: Option<String>,
    /// Fetched proofs per each fetch point.
    pub proofs: ProcessedBlockProofs,
    /// tasks to be executed.
    pub tasks: Vec<ProcessedTask>,
}

impl RunnerProgramInput {
    pub fn new(proofs: ProcessedBlockProofs, task_root: String, tasks: Vec<ProcessedTask>) -> Self {
        Self {
            task_root,
            result_root: None,
            tasks,
            proofs,
        }
    }
}
